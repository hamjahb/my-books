{"version":3,"sources":["Pages/Card.js","Pages/BookCards.js","Pages/FavoriteCards.js","Pages/FavoriteBookCards.js","Pages/Favorites.js","App.js","serviceWorker.js","index.js"],"names":["BookCard","props","onClickFavorite","e","stopPropagation","favoriteClickCard","book","Card","className","Image","src","this","image_url","_text","Content","header","title","class","onClick","Component","BookCards","state","bookRender","search","map","item","favoriteClick","FavoriteCards","console","log","FavoriteBookCards","favorites","Favorites","removeAllOnClick","removeAll","App","newFavorites","bookIndex","indexOf","push","splice","setState","newSearch","searchquerry","url","fetch","then","resp","text","str","querryResult","parser","xml2js","compact","ignoreDoctype","attributesKey","GoodreadsResponse","results","work","searcharray","index","best_book","catch","error","value","handleChange","bind","handleSubmit","event","target","preventDefault","onSubmit","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2781aa28.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Card, Icon, Image } from 'semantic-ui-react'\n\n\n\nclass BookCard extends Component {\n    constructor(props){\n        super(props)\n        \n    }\n\n    onClickFavorite = (e) => {\n        e.stopPropagation()\n        // console.log(` onclick ${this.props.book});\n        \n        this.props.favoriteClickCard(this.props.book)\n    }\n    \n    \n\n    render(){\n\n        \n        return(\n        <Card className ='card'>\n            <Image src={this.props.book.image_url._text}></Image>\n            <Card.Content>\n                <Card.header>{this.props.book.title._text}</Card.header>\n            <p>description</p>\n            <i class=\"material-icons\"  \n            onClick={this.onClickFavorite} >favorite_border</i>\n            </Card.Content>\n        </Card>\n        )\n    }\n}\n\nexport default BookCard;","import React, {Component} from 'react';\nimport BookCard from './Card'\n\n\nclass BookCards extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n    \n        }\n\n    }    \n\n    render() {\n        // console.log(this.props.search);\n        const bookRender = this.props.search.map((item) =>{\n            // console.log(item.image_url._text);\n            \n            return(\n                <BookCard book={item} \n                favoriteClickCard = {this.props.favoriteClick}\n                />\n            )\n        })   \n\n        \n        return (\n            \n            bookRender? bookRender: null\n        )\n    }\n}\n\n\nexport default BookCards;","import React, {Component} from 'react';\n\n\n\nclass FavoriteCards extends Component {\n    constructor(props){\n        super(props)\n        \n    }\n\n    onClickFavorite = (e) => {\n        e.stopPropagation()\n        // console.log('on click work');\n        console.log(this.props.book);\n        \n        this.props.favoriteClickCard(this.props.book) \n    }\n    \n\n    render(){\n\n        \n        return(\n        <div className ='card'>\n            <img src={this.props.book.image_url._text}></img>\n            <h3>{this.props.book.title._text}</h3>\n            <p>description</p>\n            <i class=\"material-icons\"  \n            onClick={this.onClickFavorite} >favorite_border</i>\n        </div>\n        )\n    }\n}\n\nexport default FavoriteCards;","import React, {Component} from 'react';\nimport FavoriteCards from './FavoriteCards'\n\n\nclass FavoriteBookCards extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n    \n        }\n\n    }    \n\n\n    render() {\n        // console.log(this.props.search);\n        const bookRender = this.props.favorites.map((item) =>{\n            // console.log(item);\n            \n            return(\n                <FavoriteCards book={item} \n                favoriteClickCard = {this.props.favoriteClick}\n                />\n            )\n        })   \n\n        \n        return (\n            \n            bookRender? bookRender: null\n        )\n    }\n}\n\n\nexport default FavoriteBookCards;","import React, {Component} from 'react';\nimport FavoriteBookCards from './FavoriteBookCards'\n\n\nclass Favorites extends Component {\n\n    removeAllOnClick = (e) => {\n        e.stopPropagation()\n        // console.log('on click work');\n        this.props.removeAll()\n    }\n\n\n    render () {\n        // console.log(this.props.favorites);\n        \n        return(\n            <div>\n\n        <FavoriteBookCards \n            favorites={this.props.favorites}\n            favoriteClick = {this.props.favoriteClick}/>\n\n\n        <button\n        onClick = {this.removeAllOnClick}>\n            Activate Lasers\n        </button>\n\n        </div>\n        )\n\n        \n    }\n}\n\n\n\nexport default Favorites;","import React, { Component } from 'react';\nimport './App.css';\nimport parser from 'xml-js';\nimport BookCards from './Pages/BookCards';\nimport Favorites from './Pages/Favorites';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      favorites: [],\n      value: '',\n      search:[]\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n\n\n  favoriteClick =(book) => {\n    // keep getting object object but works on both favorite and unfavorite\n    console.log(`${book} add to favorites`);\n    const newFavorites = [...this.state.favorites ];\n    const bookIndex = newFavorites.indexOf(book);\n  \n    \n\n    if (bookIndex === -1) {\n      // console.log(`Adding ${book} to favorites`);\n      newFavorites.push(book)\n    } else {\n\n      // console.log(`Removing ${book} from favorites`);\n      newFavorites.splice(bookIndex, 1);\n    }\n    \n    this.setState({\n        favorites : newFavorites\n    })\n}\n\n  removeAll = () => {\n    this.setState({\n      favorites : []\n  })\n  }\n\n  newSearch = (searchquerry) =>{\n    console.log(`starting new search for ${searchquerry}`);\n    \n    const key = 'AiY0kCwWYFSK3RilpXntbQ';\n    const query = searchquerry;\n    const page = '';\n    const searchCriteria = 'all'\n\n    \n    const url =  `https://cors-anywhere.herokuapp.com/https://www.goodreads.com/search/index.xml?q=${query}&page${page}&key=${key}&search=${searchCriteria}`\n    // console.log(url);\n\n    fetch(url)\n    .then((resp) => {\n      resp.text()\n        .then(str => {\n\n        // turns response from XML to json\n        let json = parser.xml2js(str, {\n          compact: true,\n          ignoreDoctype: true,\n          attributesKey: \"attributes\"\n        });      \n        \n        // book search querry location \n        const querryResult = json.GoodreadsResponse.search.results.work;\n        // console.log(json.GoodreadsResponse.search.results.work)\n\n        \n        // add new book items to search state\n        let searcharray= []\n        const bookContents = (querryResult).map((item, index) => {\n          // console.log(item)\n          // searcharray.push(item.best_book.title._text)\n          searcharray.push(item.best_book)\n        })     \n\n        this.setState({\n          search: searcharray\n        })\n        // check current state after adding books\n        // console.log(this.state.search);\n      })\n    })\n\n    .catch((error) => {\n      console.log(error)\n    })\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n    // console.log(`value changed to ${this.state.value}`);\n    \n  }\n\n  handleSubmit(event) {\n    console.log('a book search was submitted ' + this.state.value);\n    event.preventDefault();\n    this.newSearch(this.state.value);\n  }\n\n  render() {\n\n    // console.log(this.state.favorites);\n    \n    return (\n      <div className=\"App\">\n\n        <body>\n\n          <h2>your favorites</h2>\n\n          <ul>\n            <Favorites favorites={this.state.favorites}\n            favoriteClick = {this.favoriteClick}\n            removeAll = {this.removeAll}/>\n          </ul>\n\n\n          <h2>Search for books</h2>\n          <form onSubmit={this.handleSubmit}>\n            <input type=\"text\"  onChange = {this.handleChange}>\n            </input>\n\n            <input type=\"submit\" value=\"Search\" />\n          </form>\n\n          <ul>\n            <BookCards \n              search={this.state.search} \n              favorites = {this.state.favorites}\n              favoriteClick = {this.favoriteClick}\n\n            />\n          </ul>\n\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}